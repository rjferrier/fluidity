{% extends "diml.template" %}

{% block intro_comment_block %}
<comment>Saturation sources have been computed using SymPy.  Velocity divergence minus saturation source should sum to zero over the phases:
{{ divergence_check }}
</comment>
{% endblock %}

{% block other_mesh_blocks %}
<mesh name="SaturationSourceMesh">
  <from_mesh>
    <mesh name="CoordinateMesh"/>
    <mesh_shape>
      <polynomial_degree>
        <integer_value rank="0">1</integer_value>
      </polynomial_degree>
      <element_type>
        <string_value>lagrangian</string_value>
      </element_type>
    </mesh_shape>
    <mesh_continuity>
      <string_value>continuous</string_value>
    </mesh_continuity>
    <stat>
      <exclude_from_stat/>
    </stat>
  </from_mesh>
</mesh>
{% endblock %}

{% macro field_function(expression) %}
<python>
  <string_value lines="20" type="code" language="python">def val(X, t):
  from numpy import sqrt, pi, cos, sin, exp
  return {{ field_function|format_sympy }}</string_value>
</python>
{% endmacro %}

{% macro initial_condition(expression) %}
<initial_condition name="WholeMesh">
  {{ field_function(expression) }}
</initial_condition>
{% endmacro %}

{% macro boundary_condition(name, boundary_ids, expression) %}
<boundary_conditions name="{{ name }}">
  <surface_ids>
    <integer_value shape="{{ boundary_ids|length }}" rank="1">{{ boundary_ids|join(' ') }}</integer_value>
  </surface_ids>
  <type name="dirichlet">
    <apply_strongly/>
    {{ expression }}
  </type>
</boundary_conditions>
{% endmacro %}


{% block pressure1_ic_block %}
{{ initial_condition(pressures[0]) }}
{% endblock %}

{% block pressure1_bc_block %}
{{ boundary_condition('pressure1', pressure1_dirichlet_boundary_ids, pressures[0]) }}
{% endblock %}

{% macro saturation_source(phase_num) %}
<scalar_field name="Source" rank="0">
  <prescribed>
    <mesh name="SaturationSourceMesh"/>
    <value name="WholeMesh">
      <python>
        <string_value type="code" lines="20" language="python">def val(X, t):
  from numpy import sqrt, pi, cos, sin, exp
  return {{ saturation_sources[phase_num - 1]|format_sympy }}</string_value>
      </python>
    </value>
    <stat>
      <include_cv_stats/>
    </stat>
  </prescribed>
</scalar_field>
{% endmacro %}

{% block saturation1_source_block %}
{{ saturation_source(1) }}
{% endblock %}

{% block saturation2_source_block %}
{{ saturation_source(2) }}
{% endblock %}


{% block examined_field_block %}
<scalar_field name="Analytical{{ ef.variable_name }}Solution">
  <prescribed>
    <mesh name="PressureMesh"/>
    <value name="WholeMesh">
      <python>
        <string_value lines="20" type="code" language="python">def val(X, t):
  from numpy import sqrt, pi, cos, sin, exp
  return {{ ef.solution(pressures, saturations)|format_sympy }}</string_value>
      </python>
    </value>
    <stat>
      <include_cv_stats/>
    </stat>
  </prescribed>
</scalar_field>
<scalar_field name="{{ ef.variable_name }}AbsError">
  <diagnostic>
    <mesh name="{% if ef.variable_name == 'Pressure' %}PressureMesh{% else %}CoordinateMesh{% endif %}"/>
    <algorithm source_field_2_type="scalar" name="scalar_difference" source_field_1_name="{{ ef.variable_name }}" source_field_2_name="Analytical{{ ef.variable_name }}Solution" material_phase_support="single" source_field_1_type="scalar">
      <absolute_difference/>
    </algorithm>
    <stat>
      <include_cv_stats/>
    </stat>
    <consistent_interpolation/>
  </diagnostic>
</scalar_field>
{% endblock %}


{% block capillary_pressure_block %}
{% if capillary_pressure_wrt_saturation %}
<scalar_field name="CapilliaryPressure" rank="0">
  <diagnostic>
    <mesh name="PressureMesh"/>
    <algorithm name="scalar_python_diagnostic" material_phase_support="single">
      <string_value type="code" lines="20" language="python">
S2_field = state.scalar_fields["Saturation"]
Sr2 = {{ residual_saturations[1] }}
for n in range(field.node_count):
   S2 = S2_field.node_val(n)
   pc = {{ capillary_pressure_wrt_saturation|format_sympy }}
   # a minus sign is needed because pressure2 appears to be computed
   # in the source code as pressure1 + capillary_pressure
   field.set(n, -pc)</string_value>
    </algorithm>
    <stat>
      <include_cv_stats/>
    </stat>
    <consistent_interpolation/>
  </diagnostic>
</scalar_field>
{% endif %}
{% endblock %}


{% block saturation2_ic_block %}
{{ initial_condition(saturations[1]) }}
{% endblock %}

{% block saturation2_bc_block %}
{{ boundary_condition('saturation2', saturation2_dirichlet_boundary_ids, saturations[1]) }}
{% endblock %}


{% block darcy_velocity2_bc_block %}
{% for boundary_id in normal_velocity2_dirichlet_boundary_ids %}
{{ boundary_condition('velocity2_boundary' + boundary_id, [boundary_id], boundary_normal_darcy_velocities[1][boundary_id - 1]) }}
{% endfor %}
{% endblock %}
