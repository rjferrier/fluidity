<?xml version='1.0' encoding='utf-8'?>
<darcy_impes_options>
  <simulation_name>
    <string_value lines="1">{{ opt.simulation_name }}</string_value>
    <comment>Saturation sources have been computed using SymPy.  Velocity divergence minus saturation source should sum to zero over the phases:
{{ opt.divergence_check }}
</comment>
  </simulation_name>
  <geometry>
    <dimension>
      <integer_value rank="0">{{ opt.dim_number }}</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <!-- assume that simulations take place in a directory parallel
           to {{ opt.mesh_dir }}/ -->
      <from_file file_name="../{{ opt.mesh_dir }}/{{ opt.mesh_name }}">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
          <element_type>
            <string_value>lagrangian</string_value>
          </element_type>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="ElementWiseMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">0</integer_value>
          </polynomial_degree>
          <element_type>
            <string_value>lagrangian</string_value>
          </element_type>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="SaturationSourceMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
          <element_type>
            <string_value>lagrangian</string_value>
          </element_type>
        </mesh_shape>
        <mesh_continuity>
          <string_value>continuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">1</integer_value>
      </degree>
      <controlvolume_surface_degree>
        <integer_value rank="0">1</integer_value>
      </controlvolume_surface_degree>
    </quadrature>
    <disable_geometric_data_cache/>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">{{ opt.dump_period }}</real_value>
      </constant>
    </dump_period>
    <output_mesh name="PressureMesh"/>
    <stat>
      <output_at_start/>
    </stat>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">{{ opt.time_step }}</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">{{ opt.finish_time }}</real_value>
    </finish_time>
    {% if opt.adaptive_timestepping %}
    <adaptive_timestep/>
    {% endif %}
  </timestepping>
  <physical_parameters>
  {% if opt.gravity_magnitude %}
    <gravity>
      <magnitude>
        <real_value rank="0">{{ opt.gravity_magnitude }}</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="ElementWiseMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value shape="{{ opt.dim_number }}" dim1="dim" rank="1">{{ opt.gravity_direction|join(' ') }}</real_value>
            </constant>
          </value>
        </prescribed>
      </vector_field>
    </gravity>
  {% endif %}
  </physical_parameters>
  <material_phase name="Phase1">
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <solver name="DefaultSolverOptionsGMRES{{ opt.preconditioner|upper }}">
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="{{ opt.preconditioner }}"/>
          <relative_error>
            <real_value rank="0">1.0e-10</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from numpy import sqrt, pi, cos, sin, exp
  return {{ opt.pressures[0]|format_sympy }}</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="pressure1">
          <surface_ids>
            <integer_value shape="1" rank="1">{{ opt.pressure1_dirichlet_boundary_ids|join(' ') }}</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_strongly/>
	    <python>
              <string_value lines="20" type="code" language="python">def val(X, t):
  from numpy import sqrt, pi, cos, sin, exp
  return {{ opt.pressures[0]|format_sympy }}</string_value>
  	    </python>
          </type>
        </boundary_conditions>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Saturation" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
	{% if opt.saturation_face_value %}
	<face_value name="{{ opt.saturation_face_value }}">
	  {% if opt.saturation_face_value != 'FirstOrderUpwind' %}
          <limit_face_value>
            <limiter name="{{ opt.saturation_face_value_limiter }}"/>
          </limit_face_value>
	  {% endif %}
        </face_value>
	{% endif %}
        <scalar_field name="Source" rank="0">
          <prescribed>
            <mesh name="SaturationSourceMesh"/>
            <value name="WholeMesh">
              <python>
                <string_value type="code" lines="20" language="python">def val(X, t):
  from numpy import sqrt, pi, cos, sin, exp
  return {{ opt.saturation_sources[0]|format_sympy }}</string_value>
              </python>
            </value>
            <stat>
              <include_cv_stats/>
            </stat>
          </prescribed>
        </scalar_field>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="RelativePermeability" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
	<correlation name="{{ opt.relperm_relation_name }}">
	  {% if opt.relperm_relation_exponents %}
          <exponents>
            <real_value shape="2" rank="1">{{ opt.relperm_relation_exponents|join(' ') }}</real_value>
          </exponents>
	  {% endif %}
	  {% if opt.residual_saturations %}
          <residual_saturations>
            <real_value shape="2" rank="1">{{ opt.residual_saturations|join(' ') }}</real_value>
          </residual_saturations>
	  {% endif %}
        </correlation>
        <face_value name="{{ opt.rel_perm_face_value }}"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Viscosity" rank="0">
      <prescribed>
        <mesh name="ElementWiseMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="0">{{ opt.viscosities[0] }}</real_value>
          </constant>
        </value>
        <stat>
          <include_cv_stats/>
        </stat>
      </prescribed>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <equation_of_state name="IncompressibleLinear">
          <reference_density>
            <real_value rank="0">{{ opt.densities[0] }}</real_value>
          </reference_density>
        </equation_of_state>
        <face_value name="FirstOrderUpwind"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <vector_field name="DarcyVelocity" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </vector_field>
    <scalar_field name="DarcyVelocityOverPorosityCFL" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <vector_field name="TotalDarcyVelocity" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </vector_field>
    <scalar_field name="DivergenceTotalDarcyVelocity" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Mobility" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="TotalMobility" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="FractionalFlow" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="SumSaturation" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="AveragePressure" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <vector_field name="BulkDarcyVelocity" rank="1">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </vector_field>
    {% macro error_variables(this_phase) %}
    {% for ef in opt.examined_fields %}
    {% if ef.phase_name == this_phase %}
    <scalar_field name="Analytical{{ ef.variable_name }}Solution">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from numpy import sqrt, pi, cos, sin, exp
  return {{ ef.variable_solution(opt)|format_sympy }}</string_value>
          </python>
        </value>
        <stat>
          <include_cv_stats/>
        </stat>
      </prescribed>
    </scalar_field>
    <scalar_field name="{{ ef.variable_name }}AbsError">
      <diagnostic>
        <mesh name="{% if ef.variable_name == 'Pressure' %}PressureMesh{% else %}CoordinateMesh{% endif %}"/>
        <algorithm source_field_2_type="scalar" name="scalar_difference" source_field_1_name="{{ ef.variable_name }}" source_field_2_name="Analytical{{ ef.variable_name }}Solution" material_phase_support="single" source_field_1_type="scalar">
          <absolute_difference/>
        </algorithm>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    {% endif %}
    {% endfor %}
    {% endmacro %}
    {{ error_variables('Phase1') }}
  </material_phase>
  <material_phase name="Phase2">
    <scalar_field name="Pressure" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    {% if opt.capillary_pressure_wrt_saturation %}
    <scalar_field name="CapilliaryPressure" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" lines="20" language="python">
S2_field = state.scalar_fields["Saturation"]
Sr2 = {{ opt.residual_saturations[1] }}
for n in range(field.node_count):
   S2 = S2_field.node_val(n)
   pc = {{ opt.capillary_pressure_wrt_saturation|format_sympy }}
   # a minus sign is needed because pressure2 appears to be computed
   # in the source code as pressure1 + capillary_pressure
   field.set(n, -pc)</string_value>
        </algorithm>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    {% endif %}
    <scalar_field name="Saturation" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from numpy import sqrt, pi, cos, sin, exp
  return {{ opt.saturations[1]|format_sympy }}</string_value>
          </python>
        </initial_condition>
	{% if opt.saturation2_dirichlet_boundary_ids %}
        <boundary_conditions name="saturation2">
          <surface_ids>
            <integer_value shape="1" rank="1">{{ opt.saturation2_dirichlet_boundary_ids|join(' ') }}</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_strongly/>
  	    <python>
              <string_value lines="20" type="code" language="python">def val(X, t):
  from numpy import sqrt, pi, cos, sin, exp
  return {{ opt.saturations[1]|format_sympy }}</string_value>
  	    </python>
          </type>
        </boundary_conditions>
	{% endif %}
        <scalar_field name="Source" rank="0">
          <prescribed>
            <mesh name="SaturationSourceMesh"/>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="code" language="python">def val(X, t):
  from numpy import sqrt, pi, cos, sin, exp
  return {{ opt.saturation_sources[1]|format_sympy }}</string_value>
              </python>
            </value>
            <stat>
              <include_cv_stats/>
            </stat>
          </prescribed>
        </scalar_field>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="RelativePermeability" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Viscosity" rank="0">
      <prescribed>
        <mesh name="ElementWiseMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="0">{{ opt.viscosities[1] }}</real_value>
          </constant>
        </value>
        <stat>
          <include_cv_stats/>
        </stat>
      </prescribed>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <equation_of_state name="IncompressibleLinear">
          <reference_density>
            <real_value rank="0">{{ opt.densities[1] }}</real_value>
          </reference_density>
        </equation_of_state>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <vector_field name="DarcyVelocity" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
	{% for boundary_id in opt.normal_velocity2_dirichlet_boundary_ids %}
  	<boundary_conditions name="velocity2_boundary{{ boundary_id }}">
          <surface_ids>
            <integer_value shape="1" rank="1">{{ boundary_id }}</integer_value>
          </surface_ids>
          <type name="prescribed_normal_flow">
            <python>
              <string_value type="code" lines="20" language="python">def val(X, t):
  from numpy import sqrt, pi, cos, sin, exp
  return {{ opt.boundary_normal_darcy_velocities[1][boundary_id - 1]|format_sympy }}</string_value>
            </python>
          </type>
        </boundary_conditions>
	{% endfor %}
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </vector_field>
    <scalar_field name="DarcyVelocityOverPorosityCFL" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Mobility" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="FractionalFlow" rank="0">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="Internal"/>
        <stat>
          <include_cv_stats/>
        </stat>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    {{ error_variables('Phase2') }}
  </material_phase>
  <porous_media>
    <scalar_field name="Porosity">
      <prescribed>
        <mesh name="ElementWiseMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="0">{{ opt.porosity }}</real_value>
          </constant>
        </value>
        <stat>
          <include_cv_stats/>
        </stat>
      </prescribed>
    </scalar_field>
    <scalar_field name="AbsolutePermeability">
      <prescribed>
        <mesh name="ElementWiseMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="0">{{ opt.absolute_permeability }}</real_value>
          </constant>
        </value>
        <stat>
          <include_cv_stats/>
        </stat>
      </prescribed>
    </scalar_field>
  </porous_media>
</darcy_impes_options>
