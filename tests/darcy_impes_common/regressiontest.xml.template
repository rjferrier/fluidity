<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
{# <!-- This template is used by opiter_extended_utils.py --> #}
<testproblem>
  <name>{{ problem.problem_name }}</name>
  <owner userid="{{ problem.user_id }}"/>
  <tags>{{ problem.simulation_options_extension }}</tags>
  <problem_definition length="{{ problem.test_length }}" nprocs="1">
    <command_line>
{% if problem.simulation_dir %}
cd {{ problem.simulation_dir }}
{% endif %}
{% for sim in simulations %}
{{ sim.args|join(' ')}}
{% endfor %}
    </command_line>
  </problem_definition>
  
  <variables>
    {% for sim in simulations %}
    <variable name="stat_{{ sim.name }}" language="python">
from fluidity_tools import stat_parser
stat_{{ sim.name }} = stat_parser('{% if problem.simulation_dir %}{{ problem.simulation_dir }}/{% endif %}{{ sim.name }}.stat')
    </variable>
    {% endfor %}

    {% for var in abscissa_variables %}
    <variable name="{{ var.label }}" language="python">
{{ var.label }} = {{ var.value }}
    </variable>
    {% endfor %}

    {% for var in error_variables %}
    <variable name="{{ var.label }}" language="python">
try:
    {{ var.label }} = stat_{{ var.simulation_name }}['{{ var.phase_name }}']['{{ var.name }}']['{{ var.calculation }}'][{{ var.timestep_index }}]
except KeyError:
    print '''
Expected to find {{ var.phase_name }}::{{ var.name }} in the stat file; 
has this been defined in the options file?'''
    raise
    </variable>
    {% endfor %}
  </variables>
  
  <pass_tests>
    {% macro test_header(var) %}
<test name="{{ var.label }} &{{ var.rel_op }}; {{ var.threshold }}" language="python">
    {% endmacro %}
    {% macro test_footer(var) %}
try:
    assert({{ var.label }} &{{ var.rel_op }}; {{ var.threshold }})
except AssertionError:
    print {{ var.label }}
    raise
    </test>
    {% endmacro %}
    
    {% for var in error_variables %}
    {% if var.threshold %}
    {{ test_header(var) }}{{ test_footer(var) }}
    {% endif %}
    {% endfor %}

    {% for var in rate_variables %}
    {% if var.threshold %}
    {{ test_header(var) }}import numpy
current_abscissa = float(abscissa_{{ var.key }})
current_error = numpy.abs(error_{{ var.key }})
previous_abscissa = float(abscissa_{{ var.key_prev }})
previous_error = numpy.abs(error_{{ var.key_prev }})
{{ var.label }} = \
    {{ var.sign }}numpy.log(current_error/previous_error) / \
    numpy.log(current_abscissa/previous_abscissa)
{{ test_footer(var) }}
    {% endif %}
    {% endfor %}
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
