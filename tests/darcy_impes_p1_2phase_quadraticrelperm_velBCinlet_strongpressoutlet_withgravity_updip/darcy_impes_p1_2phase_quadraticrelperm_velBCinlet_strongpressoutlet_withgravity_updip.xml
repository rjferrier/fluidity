<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip</name>
  <owner userid="btollit"/>
  <tags>diml</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>
python processing.py
    </command_line>
    <!-- One/two/three dimensional problem for darcy flow including gravity (updip) using the IMPES solver with one region with 2 phases using Quadratic relative permeabilities with a TotalDarcyVelocity BC at the inlet, a strong pressure BC at outlet and the first phase saturation diagnostic. Different CV face value schemes are tested in 1,2 and 3d. The order of convergence is checked for both the saturation and pressure. -->
  </problem_definition>
  <variables>
    <variable name="phase1_sat_relpermupwind_max_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_1d_A.stat")
phase1_sat_relpermupwind_max_1d_A = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_relpermupwind_min_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_1d_A.stat")
phase1_sat_relpermupwind_min_1d_A = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_relpermupwind_max_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_1d_A.stat")
phase2_sat_relpermupwind_max_1d_A = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_relpermupwind_min_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_1d_A.stat")
phase2_sat_relpermupwind_min_1d_A = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_relpermupwind_max_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_1d_A.stat")
sum_sat_relpermupwind_max_1d_A = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_relpermupwind_min_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_1d_A.stat")
sum_sat_relpermupwind_min_1d_A = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_relpermupwind_integral_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_1d_A.stat")
sum_sat_relpermupwind_integral_1d_A = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    <variable name="phase1_sat_relpermupwind_max_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_2d_A.stat")
phase1_sat_relpermupwind_max_2d_A = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_relpermupwind_min_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_2d_A.stat")
phase1_sat_relpermupwind_min_2d_A = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_relpermupwind_max_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_2d_A.stat")
phase2_sat_relpermupwind_max_2d_A = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_relpermupwind_min_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_2d_A.stat")
phase2_sat_relpermupwind_min_2d_A = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_relpermupwind_max_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_2d_A.stat")
sum_sat_relpermupwind_max_2d_A = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_relpermupwind_min_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_2d_A.stat")
sum_sat_relpermupwind_min_2d_A = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_relpermupwind_integral_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_2d_A.stat")
sum_sat_relpermupwind_integral_2d_A = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    <variable name="phase1_sat_relpermupwind_max_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_3d_A.stat")
phase1_sat_relpermupwind_max_3d_A = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_relpermupwind_min_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_3d_A.stat")
phase1_sat_relpermupwind_min_3d_A = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_relpermupwind_max_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_3d_A.stat")
phase2_sat_relpermupwind_max_3d_A = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_relpermupwind_min_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_3d_A.stat")
phase2_sat_relpermupwind_min_3d_A = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_relpermupwind_max_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_3d_A.stat")
sum_sat_relpermupwind_max_3d_A = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_relpermupwind_min_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_3d_A.stat")
sum_sat_relpermupwind_min_3d_A = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_relpermupwind_integral_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_3d_A.stat")
sum_sat_relpermupwind_integral_3d_A = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    <variable name="v_tot_mag_max_relpermupwind_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_1d_A.stat")
v_tot_mag_max_relpermupwind_1d_A = s["Phase1"]["TotalDarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="v_tot_mag_min_relpermupwind_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_relpermupwind_1d_A.stat")
v_tot_mag_min_relpermupwind_1d_A = s["Phase1"]["TotalDarcyVelocity%magnitude"]["min"][-1]
    </variable>    

    <variable name="phase1_sat_modrelpermupwind_satfesweby_max_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_1d_A.stat")
phase1_sat_modrelpermupwind_satfesweby_max_1d_A = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_modrelpermupwind_satfesweby_min_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_1d_A.stat")
phase1_sat_modrelpermupwind_satfesweby_min_1d_A = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_modrelpermupwind_satfesweby_max_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_1d_A.stat")
phase2_sat_modrelpermupwind_satfesweby_max_1d_A = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_modrelpermupwind_satfesweby_min_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_1d_A.stat")
phase2_sat_modrelpermupwind_satfesweby_min_1d_A = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_modrelpermupwind_satfesweby_max_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_1d_A.stat")
sum_sat_modrelpermupwind_satfesweby_max_1d_A = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_modrelpermupwind_satfesweby_min_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_1d_A.stat")
sum_sat_modrelpermupwind_satfesweby_min_1d_A = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_modrelpermupwind_satfesweby_integral_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_1d_A.stat")
sum_sat_modrelpermupwind_satfesweby_integral_1d_A = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    <variable name="phase1_sat_modrelpermupwind_satfesweby_max_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_2d_A.stat")
phase1_sat_modrelpermupwind_satfesweby_max_2d_A = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_modrelpermupwind_satfesweby_min_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_2d_A.stat")
phase1_sat_modrelpermupwind_satfesweby_min_2d_A = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_modrelpermupwind_satfesweby_max_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_2d_A.stat")
phase2_sat_modrelpermupwind_satfesweby_max_2d_A = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_modrelpermupwind_satfesweby_min_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_2d_A.stat")
phase2_sat_modrelpermupwind_satfesweby_min_2d_A = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_modrelpermupwind_satfesweby_max_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_2d_A.stat")
sum_sat_modrelpermupwind_satfesweby_max_2d_A = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_modrelpermupwind_satfesweby_min_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_2d_A.stat")
sum_sat_modrelpermupwind_satfesweby_min_2d_A = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_modrelpermupwind_satfesweby_integral_2d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_2d_A.stat")
sum_sat_modrelpermupwind_satfesweby_integral_2d_A = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    <variable name="phase1_sat_modrelpermupwind_satfesweby_max_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_3d_A.stat")
phase1_sat_modrelpermupwind_satfesweby_max_3d_A = s["Phase1"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase1_sat_modrelpermupwind_satfesweby_min_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_3d_A.stat")
phase1_sat_modrelpermupwind_satfesweby_min_3d_A = s["Phase1"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="phase2_sat_modrelpermupwind_satfesweby_max_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_3d_A.stat")
phase2_sat_modrelpermupwind_satfesweby_max_3d_A = s["Phase2"]["Saturation"]["max"][-1]
    </variable>    
    <variable name="phase2_sat_modrelpermupwind_satfesweby_min_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_3d_A.stat")
phase2_sat_modrelpermupwind_satfesweby_min_3d_A = s["Phase2"]["Saturation"]["min"][-1]
    </variable>    
    <variable name="sum_sat_modrelpermupwind_satfesweby_max_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_3d_A.stat")
sum_sat_modrelpermupwind_satfesweby_max_3d_A = s["Phase1"]["SumSaturation"]["max"][-1]
    </variable>    
    <variable name="sum_sat_modrelpermupwind_satfesweby_min_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_3d_A.stat")
sum_sat_modrelpermupwind_satfesweby_min_3d_A = s["Phase1"]["SumSaturation"]["min"][-1]
    </variable>
    <variable name="sum_sat_modrelpermupwind_satfesweby_integral_3d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_3d_A.stat")
sum_sat_modrelpermupwind_satfesweby_integral_3d_A = s["Phase1"]["SumSaturation"]["integral"][-1]
    </variable>
    <variable name="v_tot_mag_max_modrelpermupwind_satfesweby_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_1d_A.stat")
v_tot_mag_max_modrelpermupwind_satfesweby_1d_A = s["Phase1"]["TotalDarcyVelocity%magnitude"]["max"][-1]
    </variable>    
    <variable name="v_tot_mag_min_modrelpermupwind_satfesweby_1d_A" language="python">
from fluidity_tools import stat_parser
s = stat_parser("darcy_impes_p1_2phase_quadraticrelperm_velBCinlet_strongpressoutlet_withgravity_updip_modrelpermupwind_satfesweby_1d_A.stat")
v_tot_mag_min_modrelpermupwind_satfesweby_1d_A = s["Phase1"]["TotalDarcyVelocity%magnitude"]["min"][-1]
    </variable>
    <variable name="solvers_converged" language="python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files
    </variable>
  </variables>

  <pass_tests>
    <test name="Solvers converged" language="python">
assert(solvers_converged)
    </test>
    
    <!-- analytical comparisons, 1st order, 1D -->
    <test name="relpermupwind_1d_saturation2_l1_AB: order gt 0.5" language="python">
from sys import path
path.append('../darcy_impes_common/')
from buckley_leverett_test_tools import find_rate
assert( find_rate("relpermupwind_1d_saturation2_l1_AB") &gt; 0.5 )
    </test>
    <test name="relpermupwind_1d_saturation2_l1_BC: order gt 0.5" language="python">
from sys import path
path.append('../darcy_impes_common/')
from buckley_leverett_test_tools import find_rate
assert( find_rate("relpermupwind_1d_saturation2_l1_BC") &gt; 0.5 )
    </test>
    <test name="relpermupwind_1d_saturation2_l1_CD: order gt 0.5" language="python">
from sys import path
path.append('../darcy_impes_common/')
from buckley_leverett_test_tools import find_rate
assert( find_rate("relpermupwind_1d_saturation2_l1_CD") &gt; 0.5 )
    </test>

    <!-- basic comparisons, 1st order, 1D -->
    <test name="phase 1 using relpermupwind for 1d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_relpermupwind_max_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 1 using relpermupwind for 1d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_relpermupwind_min_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using relpermupwind for 1d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_relpermupwind_max_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using relpermupwind for 1d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_relpermupwind_min_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="Check sum_sat_max using relpermupwind for 1d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_max_1d_A - 1.0)
assert abs(sum_sat_relpermupwind_max_1d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min using relpermupwind for 1d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_min_1d_A - 1.0)
assert abs(sum_sat_relpermupwind_min_1d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral using relpermupwind for 1d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_integral_1d_A - 1.0)
assert abs(sum_sat_relpermupwind_integral_1d_A - 1.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 1st order, 2D -->
    <test name="phase 1 using relpermupwind for 2d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_relpermupwind_max_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 1 using relpermupwind for 2d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_relpermupwind_min_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using relpermupwind for 2d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_relpermupwind_max_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using relpermupwind for 2d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_relpermupwind_min_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="Check sum_sat_max using relpermupwind for 2d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_max_2d_A - 1.0)
assert abs(sum_sat_relpermupwind_max_2d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min using relpermupwind for 2d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_min_2d_A - 1.0)
assert abs(sum_sat_relpermupwind_min_2d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral using relpermupwind for 2d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_integral_2d_A - 1.0)
assert abs(sum_sat_relpermupwind_integral_2d_A - 1.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 1st order, 3D -->
    <test name="phase 1 using relpermupwind for 3d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_relpermupwind_max_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 1 using relpermupwind for 3d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_relpermupwind_min_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using relpermupwind for 3d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_relpermupwind_max_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using relpermupwind for 3d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_relpermupwind_min_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="Check sum_sat_max using relpermupwind for 3d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_max_3d_A - 1.0)
assert abs(sum_sat_relpermupwind_max_3d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min using relpermupwind for 3d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_min_3d_A - 1.0)
assert abs(sum_sat_relpermupwind_min_3d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral using relpermupwind for 3d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_relpermupwind_integral_3d_A - 1.0)
assert abs(sum_sat_relpermupwind_integral_3d_A - 1.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 1st order, 1D (velocity) -->
    <test name="Check v_tot_mag_max_relpermupwind_1d_A is 1.0 with tolerance 1.0e-08" language="python">
assert abs(v_tot_mag_max_relpermupwind_1d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check v_tot_mag_min_relpermupwind_1d_A is 1.0 with tolerance 1.0e-08" language="python">
assert abs(v_tot_mag_min_relpermupwind_1d_A - 1.0) &lt; 1.0e-08
    </test>

    <!-- analytical comparisons, 2nd order w/Sweby, 1D -->
    <test name="modrelpermupwind_satfesweby_1d_saturation2_l1_AB: order gt 0.5" language="python">
from sys import path
path.append('../darcy_impes_common/')
from buckley_leverett_test_tools import find_rate
assert( find_rate("modrelpermupwind_satfesweby_1d_saturation2_l1_AB") &gt; 0.5 )
    </test>
    <test name="modrelpermupwind_satfesweby_1d_saturation2_l1_BC: order gt 0.5" language="python">
from sys import path
path.append('../darcy_impes_common/')
from buckley_leverett_test_tools import find_rate
assert( find_rate("modrelpermupwind_satfesweby_1d_saturation2_l1_BC") &gt; 0.5 )
    </test>
    <test name="modrelpermupwind_satfesweby_1d_saturation2_l1_CD: order gt 0.5" language="python">
from sys import path
path.append('../darcy_impes_common/')
from buckley_leverett_test_tools import find_rate
assert( find_rate("modrelpermupwind_satfesweby_1d_saturation2_l1_CD") &gt; 0.5 )
    </test>

    <!-- basic comparisons, 2nd order w/Sweby, 1D -->
    <test name="phase 1 using modrelpermupwind_satfesweby for 1d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_modrelpermupwind_satfesweby_max_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 1 using modrelpermupwind_satfesweby for 1d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_modrelpermupwind_satfesweby_min_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using modrelpermupwind_satfesweby for 1d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_modrelpermupwind_satfesweby_max_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using modrelpermupwind_satfesweby for 1d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_modrelpermupwind_satfesweby_min_1d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="Check sum_sat_max using modrelpermupwind_satfesweby for 1d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_max_1d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_max_1d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min using modrelpermupwind_satfesweby for 1d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_min_1d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_min_1d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral using modrelpermupwind_satfesweby for 1d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_integral_1d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_integral_1d_A - 1.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 2nd order w/Sweby, 2D -->
    <test name="phase 1 using modrelpermupwind_satfesweby for 2d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_modrelpermupwind_satfesweby_max_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 1 using modrelpermupwind_satfesweby for 2d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_modrelpermupwind_satfesweby_min_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using modrelpermupwind_satfesweby for 2d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_modrelpermupwind_satfesweby_max_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using modrelpermupwind_satfesweby for 2d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_modrelpermupwind_satfesweby_min_2d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="Check sum_sat_max using modrelpermupwind_satfesweby for 2d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_max_2d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_max_2d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min using modrelpermupwind_satfesweby for 2d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_min_2d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_min_2d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral using modrelpermupwind_satfesweby for 2d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_integral_2d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_integral_2d_A - 1.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 2nd order w/Sweby, 3D -->
    <test name="phase 1 using modrelpermupwind_satfesweby for 3d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_modrelpermupwind_satfesweby_max_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 1 using modrelpermupwind_satfesweby for 3d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase1_sat_modrelpermupwind_satfesweby_min_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using modrelpermupwind_satfesweby for 3d for mesh A has max(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_modrelpermupwind_satfesweby_max_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="phase 2 using modrelpermupwind_satfesweby for 3d for mesh A has min(sat) in [0.0, 1.0] with tolerance 1.0e-08" language="python">
assert abs(phase2_sat_modrelpermupwind_satfesweby_min_3d_A - 0.5) &lt; (0.5 + 1.0e-08)
    </test>
    <test name="Check sum_sat_max using modrelpermupwind_satfesweby for 3d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_max_3d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_max_3d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_min using modrelpermupwind_satfesweby for 3d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_min_3d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_min_3d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check sum_sat_integral using modrelpermupwind_satfesweby for 3d for mesh A is 1.0 with tolerance 1.0e-08" language="python">
print 'difference: ',abs(sum_sat_modrelpermupwind_satfesweby_integral_3d_A - 1.0)
assert abs(sum_sat_modrelpermupwind_satfesweby_integral_3d_A - 1.0) &lt; 1.0e-08
    </test>
    
    <!-- basic comparisons, 2nd order w/Sweby, 1D (velocity) -->
    <test name="Check v_tot_mag_max_modrelpermupwind_satfesweby_1d_A is 1.0 with tolerance 1.0e-08" language="python">
assert abs(v_tot_mag_max_modrelpermupwind_satfesweby_1d_A - 1.0) &lt; 1.0e-08
    </test>
    <test name="Check v_tot_mag_min_modrelpermupwind_satfesweby_1d_A is 1.0 with tolerance 1.0e-08" language="python">
assert abs(v_tot_mag_min_modrelpermupwind_satfesweby_1d_A - 1.0) &lt; 1.0e-08
    </test>

    <!-- analytical comparisons, 1st order, 2D and 3D -->
    <test name="relpermupwind_2d_saturation2_l1_AB: order gt 0.5" language="python">
from sys import path
path.append('../darcy_impes_common/')
from buckley_leverett_test_tools import find_rate
assert( find_rate("relpermupwind_2d_saturation2_l1_AB") &gt; 0.5 )
    </test>
    <test name="relpermupwind_2d_saturation2_l1_BC: order gt 0.5" language="python">
from sys import path
path.append('../darcy_impes_common/')
from buckley_leverett_test_tools import find_rate
assert( find_rate("relpermupwind_2d_saturation2_l1_BC") &gt; 0.5 )
    </test>
    <test name="relpermupwind_3d_saturation2_l1_AB: order gt 0.5" language="python">
from sys import path
path.append('../darcy_impes_common/')
from buckley_leverett_test_tools import find_rate
assert( find_rate("relpermupwind_3d_saturation2_l1_AB") &gt; 0.5 )
    </test>
    
    <!-- analytical comparisons, 2nd order w/Sweby, 2D and 3D -->
    <test name="modrelpermupwind_satfesweby_2d_saturation2_l1_AB: order gt 0.5" language="python">
from sys import path
path.append('../darcy_impes_common/')
from buckley_leverett_test_tools import find_rate
assert( find_rate("modrelpermupwind_satfesweby_2d_saturation2_l1_AB") &gt; 0.5 )
    </test>
    <test name="modrelpermupwind_satfesweby_2d_saturation2_l1_BC: order gt 0.5" language="python">
from sys import path
path.append('../darcy_impes_common/')
from buckley_leverett_test_tools import find_rate
assert( find_rate("modrelpermupwind_satfesweby_2d_saturation2_l1_BC") &gt; 0.5 )
    </test>
    <test name="modrelpermupwind_satfesweby_3d_saturation2_l1_AB: order gt 0.5" language="python">
from sys import path
path.append('../darcy_impes_common/')
from buckley_leverett_test_tools import find_rate
assert( find_rate("modrelpermupwind_satfesweby_3d_saturation2_l1_AB") &gt; 0.5 )
    </test>
    
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
